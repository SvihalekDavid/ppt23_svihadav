@using Microsoft.AspNetCore.Components.Forms;
@using Ppt23.Client.ViewModels;


@{
    if (Vyb == null && IsInEditMode)
    {
        Vyb = new();
        TurnOnEdit();
    }
}

@if (Vyb != null && !IsInEditMode)
{
    <div class=@ziskejBarvuRadku(Vyb)>@Vyb.Name</div>
    <div class=@ziskejBarvuRadku(Vyb)>@Vyb.BoughtDateTime.ToString("yyyy-MM-dd")</div>
    <div class=@ziskejBarvuRadku(Vyb)>@Vyb.LastRevisionDateTime.ToString("yyyy-MM-dd")</div>
    <div class=@ziskejBarvuRadku(Vyb)>@ziskejAnoNe(Vyb)</div>
    <div class=@ziskejBarvuRadku(Vyb)>@Vyb.Cena</div>
    <div class=@ziskejBarvuRadku(Vyb)>
        <button class="twbtn bg-red-400" @onclick="() => SmazEventCallback.InvokeAsync()">X</button>
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-1" @onclick="() => RevizeEventCallback.InvokeAsync()">provest revizi</button>
        <button @onclick="() => TurnOnEdit()" class="border-[1px] border-amber-600 rounded-sm text-sm px-2 py-2">✏️</button>
    </div>
}
else if (editingItem != null && IsInEditMode)
{
    <div class="bg-green-300">
        <EditForm Model=@editingItem OnValidSubmit="() => TurnOffEdit(true)">
            <DataAnnotationsValidator /> 
            <ValidationSummary />
            <InputText class="border-2 border-slate-300" @bind-Value=@editingItem.Name />
        </EditForm>
    </div>
    <div class="bg-green-300">
        <EditForm Model=@editingItem OnValidSubmit="() => TurnOffEdit(true)">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputDate class="border-2 border-slate-300" @bind-Value=@editingItem.BoughtDateTime/>
        </EditForm>
    </div>
    <div class="bg-green-300">
        <EditForm Model=@editingItem OnValidSubmit="() => TurnOffEdit(true)" OnInvalidSubmit="() => TurnOffEdit(false)">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputDate class="border-2 border-slate-300" @bind-Value=@editingItem.LastRevisionDateTime/>
        </EditForm>   
    </div>
    <div class="bg-green-300">@ziskejAnoNe(editingItem)</div>
    <div class="bg-green-300">
        <EditForm Model=@editingItem OnValidSubmit="() => TurnOffEdit(true)" >
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputNumber class="border-2 border-slate-300" @bind-Value=@editingItem.Cena />
        </EditForm>
    </div>
    <div class="bg-green-300">
        @if (ChildContent == null)
        {
            <button @onclick="() => TurnOffEdit(true)" type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2">
                Ok
            </button>
            <button @onclick="() => TurnOffEdit(false)" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2">
                zruš
            </button>
        }
        else
        {
            <button @onclick="() => TurnOffEdit(true)" type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2">
                Ok
            </button>
            @ChildContent
        }
    </div>
}
@code
{
    bool success = true;

    [Parameter, EditorRequired] public VybaveniVM? Vyb
    {
        get;
        set;
    }
    [Parameter] public bool IsInEditMode { get; set; }
    VybaveniVM? editingItem { get; set; }
    [Parameter] public EventCallback SmazEventCallback { get; set; }
    [Parameter] public EventCallback RevizeEventCallback { get; set; }
    [Parameter] public EventCallback EditDoneCallback { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            if (editingItem != null && editingItem.IsValid())
            {
                editingItem?.MapTo(Vyb);
            }
            else
            {
                return;
            }
        }
        if (Vyb is not null)
            IsInEditMode = false;
        editingItem = null;
        if (success)
        {
            EditDoneCallback.InvokeAsync(Vyb);
        }
    }

    private void TurnOnEdit()
    {
        if (Vyb != null)
        {
            IsInEditMode = true;
            editingItem = Vyb.Copy();
        }
    }

    string ziskejAnoNe(VybaveniVM v)
    {
        if (v.IsRevisionNeeded)
        {
            return "Ano";
        }
        return "Ne";
    }

    string ziskejBarvuRadku(VybaveniVM v)
    {
        if (v.IsRevisionNeeded)
        {
            return "bg-red-300";
        }
        return "bg-cyan-300";
    }
}
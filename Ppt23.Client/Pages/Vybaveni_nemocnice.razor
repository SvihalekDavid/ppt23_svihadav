@page "/vybaveni"
@using Ppt23.Shared
@using Ppt23.Client.Components
@inject HttpClient Http

@if (seznamVybaveni is null)
{
    <div class="absolute right-1/2 bottom-1/2  transform translate-x-1/2 translate-y-1/2 ">
        <div class=" border-t-transparent border-solid animate-spin  rounded-full border-teal-600 border-8 h-16 w-16"></div>
    </div>
    <div>Nacitam</div>
    return;
}

<div class="grid grid-cols-6 gap-y-5">

@if (isInNewMode)
{
<div class="font-bold">Název</div>
<div class="font-bold">Datum nákupu</div>
<div class="font-bold">Datum poslední revize</div>
<div class="font-bold">Potřebuje revizi?</div>
<div class="font-bold">Cena</div>
<div></div>

<VybaveniRow EditDoneCallback="async (Vyb) => {isInNewMode = false;await PridatVybaveni((VybaveniVM)Vyb);}" Vyb=v IsInEditMode=true>
    <button @onclick="() => isInNewMode = false" class="twbtn bg-yellow-500">Zrušit</button>
</VybaveniRow>
}
else
{
    <button class="twbtn bg-sky-500" @onclick="()=> {v = null;isInNewMode = true;}">
        Nový kus
    </button>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div class="font-bold">Název</div>
    <div class="font-bold">Datum nákupu</div>
    <div class="font-bold">Datum poslední revize</div>
    <div class="font-bold">Potřebuje revizi?</div>
    <div class="font-bold">Cena</div>
    <div></div>
}

@foreach (VybaveniVM vyb in seznamVybaveni)
{
<VybaveniRow Vyb="vyb" SmazEventCallback="() => SmazVybaveni(vyb)" RevizeEventCallback=" () => provedRevizi(vyb)" EditDoneCallback="(Vyb) => UpravVybaveni((VybaveniVM)Vyb)">
        
</VybaveniRow>
}
</div>

@code
{
    List<VybaveniVM>? seznamVybaveni;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniVM>>("vybaveni");
    }

    VybaveniVM? v = new();

    public bool isInNewMode { get; set; } = false;

    public Vybaveni_nemocnice()
    {
        //seznamVybaveni = VybaveniVM.VratRandSeznam(10);
        // v = new();
    }

    void ZmenNewMode()
    {
        isInNewMode = !isInNewMode;
    }

    void dejVybDoV(VybaveniVM Vyb)
    {
        v = Vyb.Copy();
    }

    void pridejItem()
    {
        seznamVybaveni.Add(new VybaveniVM(Guid.NewGuid(), VybaveniVM.VytvorRandomJmeno(), VybaveniVM.VytvorRandomDatumNakupu(), VybaveniVM.VytvorRandomDatumPosledniRevize()));
    }

    //void smazat(VybaveniVM vyb)
    //{
    //    seznamVybaveni.Remove(vyb);
    //}
    async Task SmazVybaveni(VybaveniVM vyb)
    {
        var odpoved = await Http.DeleteAsync($"vybaveni/{vyb.Id}");
        if (odpoved.IsSuccessStatusCode)
            seznamVybaveni?.Remove(vyb);
    }

    async Task UpravVybaveni(VybaveniVM vyb)
    {
        var odpoved = await Http.PutAsJsonAsync($"vybaveni/{vyb.Id}", vyb);
        if (odpoved.IsSuccessStatusCode)
        {
            var aktualizovaneVybaveni = await odpoved.Content.ReadFromJsonAsync<VybaveniVM>();
            var index = seznamVybaveni.FindIndex(v => v.Id == aktualizovaneVybaveni.Id);
            seznamVybaveni[index] = aktualizovaneVybaveni;
            Console.WriteLine("ano");
        }
    }

    async Task PridatVybaveni(VybaveniVM vyb)
    {
        try
        {
            var odpoved = await Http.PostAsJsonAsync("vybaveni", vyb);
            if (odpoved.IsSuccessStatusCode)
            {
                seznamVybaveni.Insert(0, vyb);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    void provedRevizi(VybaveniVM vyb)
    {
        if (vyb.IsRevisionNeeded)
        {
            vyb.LastRevisionDateTime = DateTime.Now;
        }
    }
}